-- Database Schema for Bookstore Management System

-- ENUM Type for Physical Identifier Types
-- This ENUM type is used to categorize different types of physical identifiers for books
CREATE TYPE physical_identifier_type_enum AS ENUM (
    'BARCODE_EAN13',  -- 예: 국제 상품 바코드 (13자리)
    'BARCODE_CODE128',-- 예: 다양한 문자 표현 가능 바코드
    'QR_CODE',        -- QR 코드
    'RFID_EPC',       -- RFID 태그의 EPC (Electronic Product Code)
    'NFC_UID',        -- NFC 태그의 고유 ID
    'CUSTOM_ID',      -- 사용자 정의 ID
    'OTHER'           -- 기타
);

-- Trigger Function to Set Updated Timestamp
-- This function updates the 'updated_at' field to the current timestamp
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ------------------------------------------------------------------
-- Table: publishers (출판사)
CREATE TABLE publishers (
    publisher_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL UNIQUE,
    notes TEXT,                                         -- 출판사명 변경 이력 등 기록
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER set_publishers_timestamp
BEFORE UPDATE ON publishers
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: categories (카테고리)
CREATE TABLE categories (
    category_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    parent_category_id INTEGER REFERENCES categories(category_id) ON DELETE SET NULL,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX idx_categories_name_parent_null ON categories (name) WHERE parent_category_id IS NULL;
CREATE UNIQUE INDEX idx_categories_name_parent_not_null ON categories (name, parent_category_id) WHERE parent_category_id IS NOT NULL;

CREATE TRIGGER set_categories_timestamp
BEFORE UPDATE ON categories
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: persons (저자/역자)
CREATE TABLE persons (
    person_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL, 
    bio TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER set_persons_timestamp
BEFORE UPDATE ON persons
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: tags (태그)
CREATE TABLE tags (
   tag_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50) NOT NULL UNIQUE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER set_tags_timestamp
BEFORE UPDATE ON tags
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: books (도서)
CREATE TABLE books (
    book_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title VARCHAR(255) NOT NULL,
    subtitle VARCHAR(255),                         -- 부제목
    original_title VARCHAR(255),                   -- 원제목 (번역서의 경우)
    isbn10 VARCHAR(10) UNIQUE NULLABLE,            -- ISBN-10
    isbn13 VARCHAR(13) UNIQUE NULLABLE,            -- ISBN-13
    publication_date DATE,
    edition VARCHAR(50),
    pages INTEGER,
    description TEXT,
    cover_image_url VARCHAR(255),
    publisher_id INTEGER REFERENCES publishers(publisher_id) ON DELETE SET NULL,
    category_id INTEGER REFERENCES categories(category_id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT check_at_least_one_isbn CHECK (isbn10 IS NOT NULL OR isbn13 IS NOT NULL), -- ISBN 최소 하나 존재 제약 조건 추가
    CONSTRAINT check_book_pages CHECK (pages IS NULL OR pages > 0) -- 페이지 수 제약 조건 추가
);

CREATE INDEX idx_books_title ON books (title);
CREATE INDEX idx_books_publisher_id ON books (publisher_id);
CREATE INDEX idx_books_category_id ON books (category_id);

-- ISBN 검색이 빈번하다면 인덱스 추가를 고려할 수 있습니다.
CREATE INDEX idx_books_isbn10 ON books (isbn10) WHERE isbn10 IS NOT NULL; -- NULL이 아닌 값에 대해서만 인덱싱
CREATE INDEX idx_books_isbn13 ON books (isbn13) WHERE isbn13 IS NOT NULL; -- NULL이 아닌 값에 대해서만 인덱싱


CREATE TRIGGER set_books_timestamp
BEFORE UPDATE ON books
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: person_tags (저자-태그 관계)
CREATE TABLE person_tags (
    person_id INTEGER NOT NULL REFERENCES persons(person_id) ON DELETE CASCADE,
    tag_id INTEGER NOT NULL REFERENCES tags(tag_id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (person_id, tag_id)
);

CREATE TRIGGER set_person_tags_timestamp
BEFORE UPDATE ON person_tags
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: book_tags (도서-태그 관계)
CREATE TABLE book_tags (
    book_id INTEGER NOT NULL REFERENCES books(book_id) ON DELETE CASCADE,
    tag_id INTEGER NOT NULL REFERENCES tags(tag_id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (book_id, tag_id)
);

CREATE TRIGGER set_book_tags_timestamp
BEFORE UPDATE ON book_tags
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: book_persons (도서-저자 관계)
CREATE TABLE book_persons (
    book_id INTEGER NOT NULL REFERENCES books(book_id) ON DELETE CASCADE,
    person_id INTEGER NOT NULL REFERENCES persons(person_id) ON DELETE CASCADE,
    role VARCHAR(50) NOT NULL CHECK (role IN ('author', 'translator', 'editor', 'illustrator')),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (book_id, person_id, role)
);

CREATE TRIGGER set_book_persons_timestamp
BEFORE UPDATE ON book_persons
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: book_instances (도서 실물 정보)
CREATE TABLE book_instances (
    instance_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    book_id INTEGER NOT NULL REFERENCES books(book_id) ON DELETE CASCADE, -- 원본 책 정보 삭제 시 실물 정보도 함께 삭제
    acquisition_date DATE,
    condition VARCHAR(50) CHECK (condition IN ('new', 'good', 'fair', 'poor', 'damaged', 'lost')),
    status VARCHAR(50) DEFAULT 'available' CHECK (status IN ('available', 'loaned_out', 'reserved', 'maintenance')),
    library_location VARCHAR(100),
    identifier_value VARCHAR(255) UNIQUE,           -- 실제 바코드, QR 코드 데이터, RFID 태그 ID 등을 저장 (길이 확장 및 UNIQUE 유지)
    identifier_type physical_identifier_type_enum,  -- 식별자 유형 (ENUM 타입 사용)
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_book_instances_book_id ON book_instances (book_id);

CREATE TRIGGER set_book_instances_timestamp
BEFORE UPDATE ON book_instances
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: book_analyses (도서 분석 - 6각형값, 평점, 서평 등)
CREATE TABLE book_analyses (
    analysis_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    book_id INTEGER NOT NULL REFERENCES books(book_id) ON DELETE CASCADE UNIQUE,
    rating DECIMAL(2,1) CHECK (rating IS NULL OR (rating >= 0 AND rating <= 5.0)),
    review_text TEXT,
    hexagon_value_1 INTEGER,
    hexagon_value_2 INTEGER,
    hexagon_value_3 INTEGER,
    hexagon_value_4 INTEGER,
    hexagon_value_5 INTEGER,
    hexagon_value_6 INTEGER,
    analysis_date DATE DEFAULT CURRENT_DATE,
    -- user_id INTEGER REFERENCES users(user_id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT check_hexagon_value_1_range CHECK (hexagon_value_1 IS NULL OR (hexagon_value_1 >= 0 AND hexagon_value_1 <= 5)),
    CONSTRAINT check_hexagon_value_2_range CHECK (hexagon_value_2 IS NULL OR (hexagon_value_2 >= 0 AND hexagon_value_2 <= 5)),
    CONSTRAINT check_hexagon_value_3_range CHECK (hexagon_value_3 IS NULL OR (hexagon_value_3 >= 0 AND hexagon_value_3 <= 5)),
    CONSTRAINT check_hexagon_value_4_range CHECK (hexagon_value_4 IS NULL OR (hexagon_value_4 >= 0 AND hexagon_value_4 <= 5)),
    CONSTRAINT check_hexagon_value_5_range CHECK (hexagon_value_5 IS NULL OR (hexagon_value_5 >= 0 AND hexagon_value_5 <= 5)),
    CONSTRAINT check_hexagon_value_6_range CHECK (hexagon_value_6 IS NULL OR (hexagon_value_6 >= 0 AND hexagon_value_6 <= 5))
);

CREATE TRIGGER set_book_analyses_timestamp
BEFORE UPDATE ON book_analyses
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: collections (컬렉션/시리즈 그룹 정보 - "가상의 책")
CREATE TABLE collections (
    collection_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL UNIQUE,          -- 컬렉션/시리즈 이름
    type VARCHAR(50) CHECK (type IN ('series', 'anthology', 'themed_collection', 'author_work_group', 'sequence', 'duology')),
    description TEXT,                           -- 컬렉션/시리즈에 대한 설명
    notes TEXT,                                 -- 추가 메모
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER set_collections_timestamp
BEFORE UPDATE ON collections
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: book_collection_memberships (도서-컬렉션 멤버십)
CREATE TABLE book_collection_memberships (
    book_id INTEGER NOT NULL REFERENCES books(book_id) ON DELETE CASCADE,
    collection_id INTEGER NOT NULL REFERENCES collections(collection_id) ON DELETE CASCADE,
    order_in_collection INTEGER,             -- 컬렉션/시리즈 내 순서 (예: 1, 2, 3...)
    member_role VARCHAR(100),                -- 컬렉션 내에서의 역할 (예: "본편", "외전", "단편 수록")
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (book_id, collection_id) 
);

-- 컬렉션 ID와 순서로 검색할 경우를 위한 인덱스
CREATE INDEX idx_bcm_collection_order ON book_collection_memberships (collection_id, order_in_collection);
-- 책 ID로 멤버십 검색을 위한 인덱스
CREATE INDEX idx_bcm_book_id ON book_collection_memberships (book_id);
-- 컬렉션 ID로 멤버십 검색을 위한 인덱스
CREATE INDEX idx_bcm_collection_id ON book_collection_memberships (collection_id);

CREATE TRIGGER set_bcm_timestamp
BEFORE UPDATE ON book_collection_memberships
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- ------------------------------------------------------------------
-- Table: comments (도서에 대한 댓글)
CREATE TABLE comments (
    comment_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    book_id INTEGER NOT NULL REFERENCES books(book_id) ON DELETE CASCADE,
    -- user_id INTEGER REFERENCES users(user_id) ON DELETE SET NULL,         -- 사용자 시스템 연동 시 주석 해제 및 users 테이블 필요
    comment_text TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_comments_book_id ON comments (book_id);

CREATE TRIGGER set_comments_timestamp
BEFORE UPDATE ON comments
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();